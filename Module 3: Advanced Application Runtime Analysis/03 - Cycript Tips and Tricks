iOS Challenge 4
 - Secret Pin -> Validate
 - Challenge is that we want to patch the method that checks for the passcode correctness
 
Process
 - Follow same precedure as with Challenge program 1 in 02.
 
Find iVars
 - Found the following code to be pasted online
 - cy# function tryPrintIvars(a){ var x={}; for(i in *a){ try{ x[i] = (*a)[i]; } catch(e){} } return x; }
 - cy# tryPrintIvars(UIApp.keyWindow.rootViewController)
 - Prints a bunch.
 - We are looking for where the user input is being taken.
 - cy# UIApp.keyWindow.rootViewController->userInput
 - function printMethods(className) {...found full method online...}
 - ^ to find stuff like that lookup cycript scripts
 - cy# printMethods("RuntimeModicicationViewController")
 - we found a function called "isValidPin"
 - can verify with class-dump-z

Replacing Functions
 - How can you access all instance methods?
 - Instance methods lie in messages
 - can use isa.messages
 - cy# UIApp.keyWindow.rootViewController->isa.messages
 - cy# UIApp.keyWindow.rootViewController->isa.messages['isValidPin:'] = function() { return true; }
 - Now every pin works :)
 
Why is All this Info Available?
 - Objective C is a dynamically typed language
 - This means that at runtime, a lot of things are figured out.
 - This is why the class definitions need to be present in the executable
 - Apple encourages devs to give method names very descriptive names.
